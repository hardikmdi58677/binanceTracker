{"version":3,"sources":["actions/index.js","App.js","reducers/cryptoReducer.js","reducers/index.js","index.js"],"names":["fillCryptoTable","url","cryptoSymbol","tableNumber","dispatch","a","axios","get","response","type","payload","data","tableNo","console","log","message","connect","useDispatch","useState","isMsgVisible","setIsMsgVisible","setMessage","diffPercentage","setDiffPercentage","cryptoList","useSelector","state","crypto","cryptoList1","url1Data","map","key","symbol","text","value","cryptoList2","url2Data","monitor","setMonitor","url1","setUrl1","url2","setUrl2","getData","useCallback","response1","response2","fetchData","displayData1","table1Data","crypto1","Table","Row","Cell","bidPrice","askPrice","displayData2","table2Data","crypto2","useEffect","updateInterval","setInterval","table1Symbols","table2Symbols","tab1Response","filter","includes","tab2Response","updateAllData","clearInterval","Container","Message","onDismiss","header","content","Form","Field","placeholder","onChange","e","target","Button","onClick","Object","keys","length","inverted","color","Group","widths","Select","fluid","search","label","options","Input","celled","Header","HeaderCell","Body","style","margin","table3Arr","i","A_B_PERC","B_A_PERC","parseFloat","toFixed","push","displayData3","initialState","cryptoReducer","action","tableKey","find","concat","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6fef1de.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const fetchData = (url1, url2) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response1 = await axios.get(`${url1}`);\r\n      const response2 = await axios.get(url2);\r\n      dispatch({\r\n        type: \"FETCH_DATA\",\r\n        payload: {\r\n          response1: response1.data,\r\n          response2: response2.data,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      console.log(\"Error message : \", err.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fillCryptoTable = (url, cryptoSymbol, tableNumber) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.get(`${url}?symbol=${cryptoSymbol}`);\r\n      dispatch({\r\n        type: \"UPDATE_CRYPTO_PRICE\",\r\n        payload: {\r\n          data: response.data,\r\n          tableNo: tableNumber,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      console.log(\"Error message\", err.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAllData = (url1, url2, cryptoList) => {\r\n  return async (dispatch) => {\r\n    try {\r\n    //   let tab1Response = [];\r\n    const response1 =await axios.get(url1)\r\n    const response2 =  await axios.get(url2)\r\n\t  const table1Symbols = cryptoList.table1Data.map(crypto=>crypto.symbol)\r\n\t  const table2Symbols = cryptoList.table2Data.map(crypto=>crypto.symbol)\r\n\t  const tab1Response = response1.data.filter(crypto=>table1Symbols.includes(crypto.symbol))\r\n\t  const tab2Response = response2.data.filter(crypto=>table2Symbols.includes(crypto.symbol))\r\n      dispatch({\r\n        type: \"UPDATE_DATA\",\r\n        payload: {\r\n          tab1Response : tab1Response,\r\n          tab2Response : tab2Response,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      console.log(\"Error message\", err.message);\r\n    }\r\n  };\r\n};\r\n","import React, { useEffect, useState, Fragment, useCallback } from \"react\";\nimport \"./App.css\";\nimport { Container, Form, Button, Table, Message } from \"semantic-ui-react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { fetchData, fillCryptoTable, updateAllData } from \"./actions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const [isMsgVisible, setIsMsgVisible] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const [diffPercentage, setDiffPercentage] = useState(0);\n\n  const cryptoList = useSelector((state) => state.crypto);\n  const cryptoList1 =\n    cryptoList && cryptoList.url1Data\n      ? cryptoList.url1Data.map((crypto) => ({\n          key: crypto.symbol,\n          text: crypto.symbol,\n          value: crypto.symbol,\n        }))\n      : [];\n\n  const cryptoList2 =\n    cryptoList && cryptoList.url2Data\n      ? cryptoList.url2Data.map((crypto) => ({\n          key: crypto.symbol,\n          text: crypto.symbol,\n          value: crypto.symbol,\n        }))\n      : [];\n\n  const [monitor, setMonitor] = useState(false);\n\n  const [url1, setUrl1] = useState(\"\");\n  const [url2, setUrl2] = useState(\"\");\n  const getData = useCallback(\n    (url1, url2) => {\n      if (url1 && url2) {\n        dispatch(fetchData(url1, url2));\n      }\n    },\n    [dispatch]\n  );\n  const displayData1 = useCallback(() => {\n    if (cryptoList.table1Data) {\n      return cryptoList.table1Data.map((crypto1) => {\n        return (\n          <Table.Row key={crypto1.symbol}>\n            <Table.Cell>{crypto1.symbol}</Table.Cell>\n            <Table.Cell>{crypto1.bidPrice}</Table.Cell>\n            <Table.Cell>{crypto1.askPrice}</Table.Cell>\n          </Table.Row>\n        );\n      });\n    }\n  }, [cryptoList]);\n\n  const displayData2 = useCallback(() => {\n    if (cryptoList.table2Data) {\n      return cryptoList.table2Data.map((crypto2) => {\n        return (\n          <Table.Row key={crypto2.symbol}>\n            <Table.Cell>{crypto2.symbol}</Table.Cell>\n            <Table.Cell>{crypto2.bidPrice}</Table.Cell>\n            <Table.Cell>{crypto2.askPrice}</Table.Cell>\n          </Table.Row>\n        );\n      });\n    }\n  }, [cryptoList]);\n\n  const displayData3 = () => {\n    if (cryptoList.table1Data && cryptoList.table2Data) {\n      const table3Arr = []\n      for(let i=0;i<=cryptoList.table2Data.length;i++){\n        if(isMsgVisible && !monitor){\n          break\n        }\n        if(!cryptoList.table1Data[i] || !cryptoList.table2Data[i]){\n          continue\n        }\n        const A_B_PERC =(cryptoList.table1Data[i].askPrice - cryptoList.table2Data[i].bidPrice)*(100)/cryptoList.table1Data[i].askPrice\n        const B_A_PERC =(cryptoList.table1Data[i].bidPrice - cryptoList.table2Data[i].askPrice)*(100)/cryptoList.table1Data[i].bidPrice;\n        if (parseFloat(A_B_PERC) >= parseFloat(diffPercentage) || parseFloat(B_A_PERC) >= parseFloat(diffPercentage)) {\n          setMonitor(false);\n          setIsMsgVisible(true);\n          if (parseFloat(A_B_PERC).toFixed(5) >= parseFloat(diffPercentage).toFixed(5)) {\n            setMessage(\n              `Difference percentage for ${cryptoList.table1Data[i].symbol} askPrice and ${cryptoList.table2Data[i].symbol} bidPrice found to be ${diffPercentage}`\n            );\n            break\n          } else if (parseFloat(B_A_PERC).toFixed(5) >= parseFloat(diffPercentage).toFixed(5)) {\n            setMessage(\n              `Difference percentage for ${cryptoList.table1Data[i].symbol} bidPrice and ${cryptoList.table2Data[i].symbol} askPrice found to be ${diffPercentage}`\n            );\n            break\n          }\n        }\n        table3Arr.push(\n          <Table.Row key={cryptoList.table1Data[i].symbol}>\n            <Table.Cell>{A_B_PERC}</Table.Cell>\n            <Table.Cell>{B_A_PERC}</Table.Cell>\n          </Table.Row>\n        );\n      }\n      return table3Arr\n    }\n  };\n\n  useEffect(() => {\n    let updateInterval = null;\n    if (monitor) {\n      updateInterval = setInterval(() => {\n        dispatch(updateAllData(url1, url2, cryptoList));\n      }, 500);\n    }\n    return () => clearInterval(updateInterval);\n  }, [cryptoList, dispatch, monitor, url1, url2]);\n\n  return (\n    <Container>\n      {isMsgVisible && message && (\n        <Message\n          onDismiss={() => setIsMsgVisible(!isMsgVisible)}\n          header=\"Difference in Crypto price\"\n          content={message}\n        />\n      )}\n      <Form>\n        <Form.Field>\n          <label>Link 1</label>\n          <input\n            placeholder=\"Link 1\"\n            value={url1}\n            onChange={(e) => setUrl1(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Link 2</label>\n          <input\n            placeholder=\"Link 2\"\n            value={url2}\n            onChange={(e) => setUrl2(e.target.value)}\n          />\n        </Form.Field>\n        <Button onClick={() => getData(url1, url2)}>Fetch data</Button>\n\n        {!!Object.keys(cryptoList).length &&\n          cryptoList.table1Data &&\n          (!!cryptoList.table1Data.length ||\n            !!cryptoList.table2Data.length) && (\n            <Button\n              inverted\n              color={monitor ? \"green\" : \"red\"}\n              onClick={() => setMonitor(!monitor)}\n            >{`Monitor :${monitor ? \"ON\" : \"OFF\"}`}</Button>\n          )}\n\n        {url1 && url2 && (\n          <Fragment>\n            <Form.Group widths=\"equal\">\n              <Form.Select\n                fluid\n                search\n                label=\"crypto 1\"\n                options={cryptoList1}\n                onChange={(e, data) => {\n                  dispatch(fillCryptoTable(url1, data.value, 1));\n                }}\n                placeholder=\"crypto 1\"\n              />\n              <Form.Select\n                fluid\n                search\n                label=\"crypto 2\"\n                options={cryptoList2}\n                placeholder=\"crypto 2\"\n                onChange={(e, data) => {\n                  dispatch(fillCryptoTable(url2, data.value, 2));\n                }}\n              />\n              <Form.Input\n                type=\"number\"\n                fluid\n                label=\"Difference %, greater than\"\n                placeholder=\"Difference Percentage\"\n                value={diffPercentage}\n               onChange = {e=>setDiffPercentage(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group widths=\"equal\">\n              {!!Object.keys(cryptoList).length &&\n                cryptoList.table1Data &&\n                !!cryptoList.table1Data.length && (\n                  <Table celled>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.HeaderCell>Symbol</Table.HeaderCell>\n                        <Table.HeaderCell>Bid Price</Table.HeaderCell>\n                        <Table.HeaderCell>Ask Price</Table.HeaderCell>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{displayData1()}</Table.Body>\n                  </Table>\n                )}\n              {!!Object.keys(cryptoList).length &&\n                cryptoList.table2Data &&\n                !!cryptoList.table2Data.length && (\n                  <Table celled style={{ margin: 0 }}>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.HeaderCell>Symbol</Table.HeaderCell>\n                        <Table.HeaderCell>Bid Price</Table.HeaderCell>\n                        <Table.HeaderCell>Ask Price</Table.HeaderCell>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{displayData2()}</Table.Body>\n                  </Table>\n                )}\n              {!!Object.keys(cryptoList).length &&\n                cryptoList.table1Data &&\n                cryptoList.table2Data &&\n                !!cryptoList.table1Data.length &&\n                !!cryptoList.table2Data.length && (\n                  <Table celled style={{ margin: 0 }}>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.HeaderCell>A_B Diff %</Table.HeaderCell>\n                        <Table.HeaderCell>B_A Diff %</Table.HeaderCell>\n                      </Table.Row>\n                    </Table.Header>\n                    {displayData3()}\n                  </Table>\n                )}\n            </Form.Group>\n          </Fragment>\n        )}\n      </Form>\n    </Container>\n  );\n}\n\nexport default connect()(App);\n","const initialState = {\r\n  url1Data: [],\r\n  url2Data: [],\r\n  table1Data: [],\r\n  table2Data: [],\r\n};\r\n\r\nconst cryptoReducer = (state = initialState, action) => {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case \"FETCH_DATA\": {\r\n      const url1Data = payload.response1;\r\n      const url2Data = payload.response2;\r\n      return {\r\n        url1Data,\r\n        url2Data,\r\n      };\r\n    }\r\n\r\n    case \"UPDATE_CRYPTO_PRICE\": {\r\n      const tableKey = `table${payload.tableNo}Data`;\r\n      return {\r\n        ...state,\r\n        [tableKey]: state[tableKey]\r\n          ? state[tableKey].find((crypto) => {\r\n              return crypto.symbol === payload.data.symbol;\r\n            })\r\n            ? state[tableKey].map((crypto) => {\r\n                if (crypto.symbol === payload.data.symbol) {\r\n                  return payload.data;\r\n                }\r\n                return crypto;\r\n              })\r\n            : [...state[tableKey], payload.data]\r\n          : [].concat(payload.data),\r\n      };\r\n    }\r\n\r\n    case \"UPDATE_DATA\": {\r\n      return {\r\n        ...state,\r\n        table1Data: payload.tab1Response,\r\n        table2Data: payload.tab2Response,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cryptoReducer;\r\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\"\r\nimport cryptoReducer from \"./cryptoReducer\"\r\nimport thunk from \"redux-thunk\"\r\n\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(combineReducers({\r\n    crypto: cryptoReducer,\r\n}), composeEnhancer(applyMiddleware(thunk)))\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Provider } from 'react-redux'\nimport store from \"./reducers\"\n\nReactDOM.render(\n   <Provider store={store}>\n     <App />\n   </Provider>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n// const [isMsgVisible, setIsMsgVisible] = useState(false);\n// const [message, setMessage] = useState(\"\");\n\n// const [diffPercentage, setDiffPercentage] = useState(0);\n\n// return minKey.map((crypto, i) => {\n \n\n//   return (\n//     <Table.Row key={crypto.symbol}>\n//       <Table.Cell>{A_B_PERC}</Table.Cell>\n//       <Table.Cell>{B_A_PERC}</Table.Cell>\n//     </Table.Row>\n//   );\n// });\n\n\n"],"sourceRoot":""}